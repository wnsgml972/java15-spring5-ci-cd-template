# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: build-test-pipeline

on:
#  push:  can't push
#    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Cache Gradle
      uses: actions/cache@v2.1.2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Set up JDK 15
      uses: actions/setup-java@v1
      with:
        java-version: 15

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew clean build

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo 'Build Success!'
          
    - name: Report Codecov
      uses: codecov/codecov-action@v1.0.14
      with:
        # User defined upload name. Visible in Codecov UI
        name: codecov-strada # optional
        # Repository upload token - get it from codecov.io. Required only for private repositories
        token: b9af0f87-aa2e-4a75-b753-e02f53985936 # optional
        # Path to coverage file to upload
        file: jacoco.xml # optional
        # Comma-separated list of files to upload
        # files: # optional
        # Directory to search for coverage reports.
        # directory: # optional
        # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
        # flags: # optional
        # Write upload file to path before uploading
        # path_to_write_report: # optional
        # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
        # env_vars: # optional
        # Specify whether or not CI build should fail if Codecov runs into an error during upload
        # fail_ci_if_error: # optional
        # Specify whether the Codecov output should be verbose
        # verbose: # optional
